<<<<<<< HEAD
<<<<<<< HEAD
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
tourism.data <- read.csv('JTM_inbound20170421eng.csv')
setwd("~/Desktop/info201/Group-Project")
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv')
View(tourism.data)
usa.data <- tourism.data %>% select(X, X.11)
# Group Project
library(dplyr)
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv')
# Select date(X) and country columns(X.11)
usa.data <- tourism.data %>% select(X, X.11)
View(usa.data)
usa.monthly <- usa.data %>% filter(row_number() >= 5, row_number() <= 259)
View(usa.monthly)
# Group Project
library(dplyr)
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv')
# Select date(X) and country columns(X.11)
usa.data <- tourism.data %>% select(X, X.11)
# create dataset of monthly visit
usa.monthly <- usa.data %>% filter(row_number() >= 5, row_number() <= 259)
#creat dataset of annual visit
usa.annual <- usa.data %>% filter(row_number() >= 266, row_number() <= 292)
View(usa.annual)
# Group Project
library(dplyr)
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv')
# Select date(X) and country columns(X.11)
usa.data <- tourism.data %>% select(X, X.11)
# create dataset of monthly visit
usa.monthly <- usa.data %>% filter(row_number() >= 5, row_number() <= 259)
colnames(usa.monthly) <- c("Months", "Total")
#creat dataset of annual visit
usa.annual <- usa.data %>% filter(row_number() >= 266, row_number() <= 292)
colnames(usa.annual) <- c("Years", "Total")
library(plotly)
# Group Project
=======
GetCommit <- function(id) {
commit.path <- "committees/"
commit.uri <- paste(base.uri, commit.path, sep="")
commit.params <- list(member_ids=id)
commit.response <- GET(commit.uri, query=commit.params)
commit.body <- content(commit.response, "text")
commit <- fromJSON(commit.body)
return (commit$results)
=======
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
financial.total <- ""
if(typeFinance == "currency") {
financial.total <- currency.total
} else if(typeFinance == "income") {
financial.total <- income.total
>>>>>>> minor changes
}
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = "Currency v.s Year", yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
}
financial.annual.chart(usa.annual, "currency")
financial.annual.chart <- function(data.annual, typeFinance) {
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "Currency" # Finance
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
financial.total <- ""
if(typeFinance == "currency") {
financial.total <- currency.total
} else if(typeFinance == "income") {
financial.total <- income.total
}
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = "Currency v.s Year", yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "currency")
financial.annual.chart <- function(data.annual, typeFinance) {
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "Currency" # Finance
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
financial.total <- ""
financial.type <- ""
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
<<<<<<< HEAD
# Change value to match up with the rest from the same column
usa.monthly$Months[46] = "Oct．"
library(dplyr)
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
usa.data <- tourism.data %>% select(X, X.11)
tourism.data <- read.csv('../data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('./Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('./Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv')
g
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
usa.data <- tourism.data %>% select(X, X.11)
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE);
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE);
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE);
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE);
library(dplyr)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
usa.data <- tourism.data %>% select(X, X.11)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
library(dplyr)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
library(dplyr)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng', stringsAsFactors=FALSE)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
usa.data <- tourism.data %>% select(X, X.11)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
source('~/Desktop/INFO_201/Group-Project/Charts/Financ_Annual_Chart.R', echo=TRUE)
>>>>>>> 977b48e2685d683344700e523d19be35d4c1bf63
library(dplyr)
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv')
# Select date(X) and country columns(X.11)
usa.data <- tourism.data %>% select(X, X.11)
#creat dataset of annual visit
usa.annual <- usa.data %>% filter(row_number() >= 266, row_number() <= 292)
colnames(usa.annual) <- c("Years", "Total")
View(usa.annual)
usa.annual.graph <- function(data.annual) {
x <- c(1990:2016)
y <- rnorm(data.annual$Total, mean = 70000)
data <- data.frame(x, y)
p <- plot_ly(data, x = ~x, y = ~y, type = 'scatter', mode = 'lines')
p
}
usa.annual.graph(usa.annual)
# Displays a chart given a dataset of monthly data and a year
usa.month.chart <- function(data.month, year) {
monthly.data <- data.month %>% filter(Years == year)
# Stores and chops off the commas in the numbers
total <- as.numeric(gsub(",", "", monthly.data$Total));
# Stores and arranges the months in chronological order
months <- factor(monthly.data$Months, levels = c("Jan．", "Feb．", "Mar．", "Apr．", "May．", "Jun．", "Jul．", "Aug．", "Sep．", "Oct．", "Nov．", "Dec．"))
# Display chart based on visits per month
monthly.chart <- plot_ly(monthly.data, x = ~months, y = ~total, type = 'scatter', mode = 'lines') %>% layout(title = paste("Monthly Visits from US in", year))
return (monthly.chart)
}
# Displays a chart given a dataset of monthly data and a year
usa.month.chart <- function(data.month, year) {
monthly.data <- data.month %>% filter(Years == year)
# Stores and chops off the commas in the numbers
total <- as.numeric(gsub(",", "", monthly.data$Total));
# Stores and arranges the months in chronological order
months <- factor(monthly.data$Months, levels = c("Jan．", "Feb．", "Mar．", "Apr．", "May．", "Jun．", "Jul．", "Aug．", "Sep．", "Oct．", "Nov．", "Dec．"))
# Display chart based on visits per month
monthly.chart <- plot_ly(monthly.data, x = ~months, y = ~total, type = 'scatter', mode = 'lines') %>% layout(title = paste("Monthly Visits from US in", year))
return (monthly.chart)
}
usa.month.chart(3,1999)
usa.month.chart(Jan., 1999)
View(usa.monthly)
# Group Project
library(dplyr)
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
# Select date(X) and country columns(X.11)
usa.data <- tourism.data %>% select(X, X.11)
# Creates dataset of monthly visits
usa.monthly <- usa.data %>% filter(row_number() >= 5, row_number() <= 256) %>% mutate(Years = as.integer(1996 + ((row_number() - 1) / 12)))
colnames(usa.monthly) <- c("Months", "Total", "Years")
# Removes years from Months column
i <- 1
while(i < nrow(usa.monthly)) {
usa.monthly$Months[i] = "Jan．"
i = i + 12;
}
# Change value to match up with the rest from the same column
usa.monthly$Months[46] = "Oct．"
<<<<<<< HEAD
# Creates dataset of annual visits (1996 - 2016)
usa.annual <- usa.data %>% filter(row_number() >= 266, row_number() <= 292)
colnames(usa.annual) <- c("Years", "Total")
View(usa.monthly)
usa.month.chart("Mar.", 2001)
View(usa.annual)
# Group Project
library(dplyr)
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
=======
usa.annual <- usa.data %>% filter(row_number() >= 266, row_number() <= 292)
colnames(usa.annual) <- c("Years", "Total")
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE);
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE);
tourism.data <- read.csv('data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
library(dplyr)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
library(dplyr)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
usa.data <- tourism.data %>% select(X, X.11)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
library(dplyr)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
# Group Project
library(dplyr)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
>>>>>>> 977b48e2685d683344700e523d19be35d4c1bf63
# Select date(X) and country columns(X.11)
usa.data <- tourism.data %>% select(X, X.11)
# Creates dataset of monthly visits
usa.monthly <- usa.data %>% filter(row_number() >= 5, row_number() <= 256) %>% mutate(Years = as.integer(1996 + ((row_number() - 1) / 12)))
colnames(usa.monthly) <- c("Months", "Total", "Years")
# Removes years from Months column
i <- 1
while(i < nrow(usa.monthly)) {
usa.monthly$Months[i] = "Jan．"
i = i + 12;
}
# Change value to match up with the rest from the same column
usa.monthly$Months[46] = "Oct．"
# Creates dataset of annual visits (1996 - 2016)
usa.annual <- usa.data %>% filter(row_number() >= 266, row_number() <= 292)
colnames(usa.annual) <- c("Years", "Total")
<<<<<<< HEAD
setwd("~/Desktop/info201/Group-Project/Charts")
source('Cum_Monthly_Chart.R')
cum.month.chart(usa.monthly)
# Group Project
library(dplyr)
library(plotly)
source('Cum_Monthly_Chart.R')
cum.month.chart(usa.monthly)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
# Group Project
library(dplyr)
tourism.data <- read.csv('Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
# Select date(X) and country columns(X.11)
usa.data <- tourism.data %>% select(X, X.11)
# Creates dataset of monthly visits
usa.monthly <- usa.data %>% filter(row_number() >= 5, row_number() <= 256) %>% mutate(Years = as.integer(1996 + ((row_number() - 1) / 12)))
colnames(usa.monthly) <- c("Months", "Total", "Years")
# Removes years from Months column
=======
getwd()
setwd("~/Desktop/INFO_201/Group-Project")
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
getwd()
setwd("Charts")
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
library(dplyr)
tourism.data <- read.csv('../Data/JTM_inbound20170421eng.csv', stringsAsFactors=FALSE)
usa.data <- tourism.data %>% select(X, X.11)
usa.monthly <- usa.data %>% filter(row_number() >= 5, row_number() <= 256) %>% mutate(Years = as.integer(1996 + ((row_number() - 1) / 12)))
colnames(usa.monthly) <- c("Months", "Total", "Years")
>>>>>>> 977b48e2685d683344700e523d19be35d4c1bf63
i <- 1
while(i < nrow(usa.monthly)) {
usa.monthly$Months[i] = "Jan．"
i = i + 12;
}
<<<<<<< HEAD
# Change value to match up with the rest from the same column
usa.monthly$Months[46] = "Oct．"
# Creates dataset of annual visits (1996 - 2016)
usa.annual <- usa.data %>% filter(row_number() >= 266, row_number() <= 292)
colnames(usa.annual) <- c("Years", "Total")
=======
usa.monthly$Months[46] = "Oct．"
usa.annual <- usa.data %>% filter(row_number() >= 266, row_number() <= 292)
colnames(usa.annual) <- c("Years", "Total")
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE);
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE);
=======
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "currency")
financial.annual.chart <- function(data.annual, typeFinance) {
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "Currency" # Finance
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
financial.total <- ""
financial.type <- ""
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
>>>>>>> minor changes
View(income)
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "currency")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "currency")
View(currency)
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE) %>% filter(Years != 2016)
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE) %>% filter(Years == 2016)
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE) %>% filter(Years != 2016)
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
View(currency)
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE) %>% filter(Years != 2016)
View(currency)
financial.annual.chart(usa.annual, "income")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
financial.annual.chart(usa.annual, "currency")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
return (p)
}
financial.annual.chart(usa.annual, "income")
financial.annual.chart <- function(data.annual, typeFinance) {
# Reads in the financial datasets
currency <- read.csv('../Data/currency_rates.csv', stringsAsFactors=FALSE) %>% filter(Years != "2016")
income <- read.csv('../Data/income.csv', stringsAsFactors=FALSE)
# Filters our the year 2016 to match the financial datasets
data.annual <- data.annual %>% filter(Years != "2016")
# Stores and chops off the commas in the numbers
usa.total <- as.numeric(gsub(",", "", data.annual$Total))
currency.total <- as.numeric(gsub(",", "", currency$Total))
income.total <- as.numeric(gsub(",", "", income$Total))
financial.total <- ""
financial.type <- ""
# Initializes the type of financial information specified
if(typeFinance == "currency") {
financial.total <- currency.total
financial.type <- "Currency"
} else if(typeFinance == "income") {
financial.total <- income.total
financial.type <- "Income"
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = financial.type
)
p <- plot_ly() %>%
add_lines(x = ~data.annual$Years, y = ~usa.total, name = "Visits v.s Year") %>%
add_lines(x = ~data.annual$Years, y = ~financial.total, name = paste(financial.type, "v.s Year"), yaxis = "y2") %>%
layout(
title = "Financial Impact on U.S Visits to Japan", yaxis2 = ay,
xaxis = list(title="Years"),
yaxis = list(title="Total Visitors (In Million)")
)
<<<<<<< HEAD
p
>>>>>>> 977b48e2685d683344700e523d19be35d4c1bf63
=======
return (p)
}
financial.annual.chart(usa.annual, "income")
financial.annual.chart(usa.annual, "currency")
>>>>>>> minor changes
